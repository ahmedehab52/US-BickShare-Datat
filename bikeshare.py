{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Hello! Let's explore some US bikeshare data!\n",
      "\n",
      "Which city would you like to filter by? New York City, Chicago or Washington?\n",
      "new York cIty\n"
     ]
    }
   ],
   "source": [
    "  \n",
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "CITY_DATA = {'Chicago': 'chicago.csv',\n",
    "             'New York City': 'new_york_city.csv',\n",
    "             'Washington': 'washington.csv'}\n",
    "\n",
    "\n",
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "\n",
    "    print('\\nHello! Let\\'s explore some US bikeshare data!')\n",
    "    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "\n",
    "\n",
    "    while True:\n",
    "      city = input(\"\\nWhich city would you like to filter by? New York City, Chicago or Washington?\\n\")\n",
    "      city = city.title()\n",
    "      if city not in ('New York City', 'Chicago', 'Washington'):\n",
    "        print(\"Sorry, I didn't catch that. Try again.\")\n",
    "        continue\n",
    "      else:\n",
    "        break\n",
    "\n",
    "    # TO DO: get user input for month (all, january, february, ... , june)\n",
    "\n",
    "    while True:\n",
    "      month = input(\"\\nWhich month would you like to filter by? January, February, March, April, May, June or type 'all' if you do not have any preference?\\n\")\n",
    "      \n",
    "      month = month.title()\n",
    "      if month not in ('January', 'February', 'March', 'April', 'May', 'June', 'all'):\n",
    "        print(\"Sorry, I didn't catch that. Try again.\")\n",
    "        continue\n",
    "      else:\n",
    "        break\n",
    "\n",
    "    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "\n",
    "    while True:\n",
    "      day = input(\"\\nAre you looking for a particular day? If so, kindly enter the day as follows: Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday or type 'all' if you do not have any preference.\\n\")\n",
    "      day= day.title() \n",
    "      if day not in ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'all'):\n",
    "        print(\"Sorry, I didn't catch that. Try again.\")\n",
    "        continue\n",
    "      else:\n",
    "        break\n",
    "\n",
    "    print('-'*40)\n",
    "    return city, month, day\n",
    "\n",
    "\n",
    "def load_data(city, month, day):\n",
    "\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    # load data file into a dataframe\n",
    "    df = pd.read_csv(CITY_DATA[city])\n",
    "\n",
    "    # convert the Start Time column to datetime\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "\n",
    "    # extract month and day of week from Start Time to create new columns\n",
    "\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    df['day_of_week'] = df['Start Time'].dt.weekday_name\n",
    "\n",
    "    # filter by month if applicable\n",
    "    if month != 'all':\n",
    "   \t \t# use the index of the months list to get the corresponding int\n",
    "        months = ['January', 'February', 'March', 'April', 'May', 'June']\n",
    "        month = months.index(month) + 1\n",
    "\n",
    "    \t# filter by month to create the new dataframe\n",
    "        df = df[df['month'] == month]\n",
    "\n",
    "        # filter by day of week if applicable\n",
    "    if day != 'all':\n",
    "        # filter by day of week to create the new dataframe\n",
    "        df = df[df['day_of_week'] == day.title()]\n",
    "\n",
    "    return df\n",
    "\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display the most common month\n",
    "\n",
    "    popular_month = df['month'].mode()[0]\n",
    "    print('Most Common Month:', popular_month)\n",
    "\n",
    "\n",
    "    # TO DO: display the most common day of week\n",
    "\n",
    "    popular_day = df['day_of_week'].mode()[0]\n",
    "    print('Most Common day:', popular_day)\n",
    "\n",
    "\n",
    "\n",
    "    # TO DO: display the most common start hour\n",
    "\n",
    "    df['hour'] = df['Start Time'].dt.hour\n",
    "    popular_hour = df['hour'].mode()[0]\n",
    "    print('Most Common Hour:', popular_hour)\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display most commonly used start station\n",
    "\n",
    "    Start_Station = df['Start Station'].value_counts().idxmax()\n",
    "    print('Most Commonly used start station:', Start_Station)\n",
    "\n",
    "\n",
    "    # TO DO: display most commonly used end station\n",
    "\n",
    "    End_Station = df['End Station'].value_counts().idxmax()\n",
    "    print('\\nMost Commonly used end station:', End_Station)\n",
    "\n",
    "\n",
    "    # TO DO: display most frequent combination of start station and end station trip\n",
    "\n",
    "    Combination_Station = df.groupby(['Start Station', 'End Station']).count()\n",
    "    print('\\nMost Commonly used combination of start station and end station trip:', Start_Station, \" & \", End_Station)\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display total travel time\n",
    "\n",
    "    Total_Travel_Time = sum(df['Trip Duration'])\n",
    "    print('Total travel time:', Total_Travel_Time/86400, \" Days\")\n",
    "\n",
    "\n",
    "    # TO DO: display mean travel time\n",
    "\n",
    "    Mean_Travel_Time = df['Trip Duration'].mean()\n",
    "    print('Mean travel time:', Mean_Travel_Time/60, \" Minutes\")\n",
    "\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: Display counts of user types\n",
    "\n",
    "    user_types = df['User Type'].value_counts()\n",
    "    #print(user_types)\n",
    "    print('User Types:\\n', user_types)\n",
    "\n",
    "    # TO DO: Display counts of gender\n",
    "\n",
    "    try:\n",
    "      gender_types = df['Gender'].value_counts()\n",
    "      print('\\nGender Types:\\n', gender_types)\n",
    "    except KeyError:\n",
    "      print(\"\\nGender Types:\\nNo data available for this month.\")\n",
    "\n",
    "    # TO DO: Display earliest, most recent, and most common year of birth\n",
    "\n",
    "    try:\n",
    "      Earliest_Year = df['Birth Year'].min()\n",
    "      print('\\nEarliest Year:', Earliest_Year)\n",
    "    except KeyError:\n",
    "      print(\"\\nEarliest Year:\\nNo data available for this month.\")\n",
    "\n",
    "    try:\n",
    "      Most_Recent_Year = df['Birth Year'].max()\n",
    "      print('\\nMost Recent Year:', Most_Recent_Year)\n",
    "    except KeyError:\n",
    "      print(\"\\nMost Recent Year:\\nNo data available for this month.\")\n",
    "\n",
    "    try:\n",
    "      Most_Common_Year = df['Birth Year'].value_counts().idxmax()\n",
    "      print('\\nMost Common Year:', Most_Common_Year)\n",
    "    except KeyError:\n",
    "      print(\"\\nMost Common Year:\\nNo data available for this month.\")\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\tmain()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
